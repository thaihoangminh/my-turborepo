name: CI

on:
  push:
    branches: ["main", "dev"]
  pull_request:
    branches: ["main", "dev"]

# This ensures that any new push cancels an older workflow if it's running on the same branch.
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  cache-and-install:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [ 20 ]

    # To use Remote Caching, uncomment the next lines and follow the steps below.
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Cache turbo build setup
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [ 20 ]
    needs: [cache-and-install]
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      # We skip `pnpm install` here because the "needs: [cache-and-install]" ensures
      # dependencies were already installed in that job. However, if you need the
      # node_modules in this job, you can either:
      #   a) re-run `pnpm install`, or
      #   b) use caching techniques or artifact sharing.
      # This depends on your monorepo structure and preference.
      - name: Run lint
        run: pnpm lint

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [ 20 ]
    needs: [cache-and-install, lint] # runs after lint completes
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Run tests
        run: pnpm test
#
#  build:
#    name: Build
#    timeout-minutes: 15
#    runs-on: ubuntu-latest
#    needs: [cache-and-install, test] # ensure tests are passing before building
#    strategy:
#      matrix:
#        node-version: [ 20 ]
#
#    steps:
#      - name: Check out code
#        uses: actions/checkout@v4
#
#      # Omit version input to use the version in the packageManager field in the package.json
#      # https://github.com/marketplace/actions/setup-pnpm#install-only-pnpm-with-packagemanager
#      - name: Install pnpm
#        uses: pnpm/action-setup@v4
#        with:
#          run_install: false
#
#      - name: Use Node.js ${{ matrix.node-version }}
#        uses: actions/setup-node@v4
#        with:
#          node-version: ${{ matrix.node-version }}
#          cache: 'pnpm' # Cache pnpm dependencies
#
#      - name: Build
#        run: pnpm build

#  deploy:
#    runs-on: ubuntu-latest
#    needs: [ build ] # only deploy if the build succeeds
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#
#      - uses: pnpm/action-setup@v4
#        name: Install pnpm
#        with:
#          version: 10
#          run_install: false
#
#      - name: Install Node.js
#        uses: actions/setup-node@v4
#        with:
#          node-version: 20
#          cache: 'pnpm'
#
#      - name: Deploy
#        run: |
#          # Example: If you're using Vercel CLI for deployment
#          # Make sure you have set VERCE_TOKEN as a secret
#          # and have a project configured.
#          pnpm install -g vercel
#          vercel --token ${{ secrets.VERCEL_TOKEN }} --prod