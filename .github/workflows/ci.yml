name: CI

on:
  push:
    branches: ["main", "dev"]
  pull_request:
    branches: ["main", "dev"]

env:
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ vars.TURBO_TEAM }}

# This ensures that any new push cancels an older workflow if it's running on the same branch.
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # JOB to run change detection
  changes:
    runs-on: ubuntu-latest
    # Required permissions
    permissions:
      pull-requests: read
    # Set job outputs to values from filter step
    outputs:
      docs: ${{ steps.filter.outputs.docs }}
      web: ${{ steps.filter.outputs.web }}
      ui-package: ${{ steps.filter.outputs.packages }}
    steps:
      # For pull requests it's not necessary to checkout the code
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            docs: apps/docs/**
            web: apps/web/**
            ui-package: packages/ui/**

  lint:
    needs: changes
    runs-on: ubuntu-latest
    steps:
      - name: Log output of changes job
        run: echo {{needs.changes.outputs}}

      - name: Check out code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Cache turbo build setup
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      # We skip `pnpm install` here because the "needs: [cache-and-install]" ensures
      # dependencies were already installed in that job. However, if you need the
      # node_modules in this job, you can either:
      #   a) re-run `pnpm install`, or
      #   b) use caching techniques or artifact sharing.
      # This depends on your monorepo structure and preference.
      - name: Install dependencies
        run: pnpm install

      - name: Run lint
        run: pnpm lint

  test:
    runs-on: ubuntu-latest
    needs: [changes, lint] # runs after lint completes
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Cache turbo build setup
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Run tests
        run: pnpm test

  build:
    name: Build
    timeout-minutes: 15
    runs-on: ubuntu-latest
    needs: [changes, test] # ensure tests are passing before building
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      # Omit version input to use the version in the packageManager field in the package.json
      # https://github.com/marketplace/actions/setup-pnpm#install-only-pnpm-with-packagemanager
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Cache turbo build setup
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Build
        run: pnpm build

#  deploy:
#    runs-on: ubuntu-latest
#    needs: [ build ] # only deploy if the build succeeds
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#
#      - uses: pnpm/action-setup@v4
#        name: Install pnpm
#        with:
#          version: 10
#          run_install: false
#
#      - name: Install Node.js
#        uses: actions/setup-node@v4
#        with:
#          node-version: 20
#          cache: 'pnpm'
#
#      - name: Deploy
#        run: |
#          # Example: If you're using Vercel CLI for deployment
#          # Make sure you have set VERCE_TOKEN as a secret
#          # and have a project configured.
#          pnpm install -g vercel
#          vercel --token ${{ secrets.VERCEL_TOKEN }} --prod